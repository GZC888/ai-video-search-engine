query GetIndexes($where: indexes_bool_exp = {}, $order_by: [indexes_order_by!] = {}, $limit: Int) {
  indexes(where: $where, order_by: $order_by, limit: $limit) {
    ...indexesFragment
  }
}

query GetIndexesFull($where: indexes_bool_exp = {}, $order_by: [indexes_order_by!] = {}, $limit: Int) {
  indexes(where: $where, order_by: $order_by, limit: $limit) {
    ...indexesFragment
    # description
    # tags
    transcript
    # transcript_timestamped
    # nsfw
  }
}

mutation InsertIndex($object: indexes_insert_input = {}) {
  insert_indexes_one(object: $object) {
    id
  }
}

mutation InsertEmbeddings($objects: [index_embeddings_insert_input!] = []) {
  insert_index_embeddings(objects: $objects) {
    affected_rows
    returning {
      id
    }
  }
}

mutation InsertEmbeddingsGTE($objects: [index_embeddings_gte_insert_input!] = []) {
  insert_index_embeddings_gte(objects: $objects) {
    affected_rows
    returning {
      id
    }
  }
}

query GetMatchIndexes($query_embedding: vector, $match_threshold: float8 = "0.81", $limit: Int) {
  match_indexes_gte(
    args: { match_threshold: $match_threshold, query_embedding: $query_embedding }
    limit: $limit
    distinct_on: id
    order_by: [{ id: desc }, { similarity: desc }]
  ) {
    ...indexesFragment
  }
}

query GetMatchEmbeddingsByIndex(
  $_index_id: uuid = ""
  $match_threshold: float8 = 0.65
  $query_embedding: vector
  $where: index_embeddings_gte_bool_exp = {}
  $order_by: [index_embeddings_gte_order_by!] = {}
) {
  match_embeddings_gte(
    args: { _index_id: $_index_id, match_threshold: $match_threshold, query_embedding: $query_embedding }
    where: $where
    order_by: $order_by
  ) {
    # content
    id
    start_time
    end_time
    duration_time
    similarity
  }
}

query GetIndexSummary($id: uuid!) {
  indexes_by_pk(id: $id) {
    summary_text
    summary_points
    transcript
  }
}

mutation UpdateIndexes($where: indexes_bool_exp = {}, $_set: indexes_set_input = {}) {
  update_indexes(where: $where, _set: $_set) {
    affected_rows
    returning {
      id
    }
  }
}

query GetIndexAggregate {
  indexes_aggregate {
    aggregate {
      count(columns: id)
      sum {
        duration_seconds
      }
    }
  }
}

fragment indexesFragment on indexes {
  duration_seconds
  id
  status
  updated_at
  video_id
  video_source
  video_url
  active
  created_at
  title
  similarity
}
